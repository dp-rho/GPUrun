#### CUDA LIBS/INC ####

# If CUDA_HOME is set, use its value, otherwise set it to an assumed default path
ifeq ($(origin CUDA_HOME), undefined)
  CUDA_HOME := /usr/local/cuda
endif

# Get system for installation path to headers/libs
OS_ARCH := $(shell uname -m)

# NVCC compiler, required to compile .cu files
NVCC = $(CUDA_HOME)/bin/nvcc

# CUDA headers
# Check if symlink include exists, if not search for target explicitly
ifeq ($(wildcard $(CUDA_HOME)/include),)
    CUDA_INC := $(CUDA_HOME)/targets/$(OS_ARCH)*/include
    ifeq ($(wildcard $(CUDA_INC)),)
        $(error CUDA include directory not found)
    endif
else
    CUDA_INC := $(CUDA_HOME)/include
endif

# CUDA libraries
# Check if symlink lib exists, if not search for target explicitly
ifeq ($(wildcard $(CUDA_HOME)/lib64),)
    CUDA_LIB := $(CUDA_HOME)/targets/$(OS_ARCH)*/lib
    ifeq ($(wildcard $(CUDA_LIB)),)
        $(error CUDA lib directory not found)
    endif
else
    CUDA_LIB := $(CUDA_HOME)/lib64
endif

# Shared libs using name automatically expected in Rcpp package compilation
PKG_LIBS= -L$(CUDA_LIB) -Wl,-rpath,$(CUDA_LIB) -lcudart


#### HEADERS FOR R ####

# Headers for R 
R_INC := $(shell Rscript -e "cat(R.home('include'))")

# The R_LIBS_USER environment variable, can look to creating script that
# grabs R_LIBS_USER from R session and writes to Makevars before calling
# as a more general approach 
R_LIBS_USER := $(firstword $(subst :, ,$(R_LIBS_USER)))

# Specific Rcpp headers
RCPP_INC = $(R_LIBS_USER)/Rcpp/include


#### FLAGS ####

# Libs needed for linking .o objects compiled from .cu and .cpp files 
LIBS = -lcudart -d

# Get compute capacity of NVIDIA GPU
CUDA_CC := $(shell nvidia-smi --query-gpu=compute_cap --format=csv,noheader | tr -d '.')

# Flags needed in nvcc compilation from .cu to .o
NVCC_FLAGS = -Xcompiler "-fPIC" -g -O3 -std=c++17 --diag-suppress 177 -gencode arch=compute_$(CUDA_CC),code=sm_$(CUDA_CC) 

### Define objects
cu_sources := $(wildcard *cu)
cu_sharedlibs := $(patsubst %.cu, %.o,$(cu_sources))

cpp_sources := $(wildcard *.cpp)
cpp_sharedlibs := $(patsubst %.cpp, %.o, $(cpp_sources))

OBJECTS = $(cu_sharedlibs) $(cpp_sharedlibs)

all : CCxAAAA.so

CCxAAAA.so: $(OBJECTS)

%.o: %.cpp $(cpp_sources)
	$(CXX) -fPIC $(CXXFLAGS) -I$(RCPP_INC) -I$(R_INC) $< -c

%.o: %.cu $(cu_sources)
	$(NVCC) $(NVCC_FLAGS) -I$(RCPP_INC) -I$(R_INC) -I$(CUDA_INC) $< -c
