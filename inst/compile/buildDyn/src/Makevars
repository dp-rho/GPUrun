# Location of CUDA program, change if needed
CUDA_HOME = /usr/local/cuda

# The R_LIBS_USER environment variable, can look to creating script that
# grabs R_LIBS_USER from R session and writes to Makevars before calling
# as a more general approach 
R_LIBS_USER := $(firstword $(subst :, ,$(R_LIBS_USER)))

# Shared libs using name automatically expected in Rcpp package compilation
PKG_LIBS= -L$(CUDA_HOME)/lib64 -Wl,-rpath,$(CUDA_HOME)/lib64 -lcudart


#########################################

# Headers for R 
R_INC = /usr/share/R/include

# Specific Rcpp headers
RCPP_INC = $(R_LIBS_USER)/Rcpp/include

# NVCC compiler, required to compiled .cu files
NVCC = $(CUDA_HOME)/bin/nvcc

# CUDA headers
CUDA_INC = $(CUDA_HOME)/include

# CUDA library
CUDA_LIB = $(CUDA_HOME)/lib64

# Libs needed for linking .o objects compiled from .cu and .cpp files 
LIBS = -lcudart -d

# Flags needed in nvcc compilation from .cu to .o
NVCC_FLAGS = -Xcompiler "-fPIC" -g -O3 -std=c++17 --diag-suppress 177 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=\"compute_70,sm_70\"

### Define objects
cu_sources := $(wildcard *cu)
cu_sharedlibs := $(patsubst %.cu, %.o,$(cu_sources))

cpp_sources := $(wildcard *.cpp)
cpp_sharedlibs := $(patsubst %.cpp, %.o, $(cpp_sources))

OBJECTS = $(cu_sharedlibs) $(cpp_sharedlibs)

all : CCxAAAA.so

CCxAAAA.so: $(OBJECTS)

%.o: %.cpp $(cpp_sources)
	$(CXX) -fPIC $(CXXFLAGS) -I$(RCPP_INC) -I$(R_INC) $< -c

%.o: %.cu $(cu_sources)
	$(NVCC) $(NVCC_FLAGS) -I$(RCPP_INC) -I$(R_INC) -I$(CUDA_INC) $< -c
